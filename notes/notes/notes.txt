I figured it would be nice to have a doc to house ideas, concerns, and bugs that exist.

-I created a new ball object, one that can work for both pong and breakout (and should be extendable to
space invaders). It works by only counting a score when it goes beyond the enemy paddle, and then resetting
its state once it bounces back. There is a small issue with it, that being that if it impacts the back end of
the paddle (imagine hitting a brick right behind the paddle and it coming back or some such), it scores again.
This can probably be fixed by moving the margins of where a score counts but it doesn't feel like a huge
concern at this time.

-In regards to the ball, it is currently only set up in the breakout and invaders room. It will not 
function 100% correctly in the pong room as it is not set to respawn to the middle of the screen like
in a normal game of pong. This could be fixed by merely checking the game state to determine spawning behavior. 
If I make that change this blurb will be deleted.

-Cursed behavior that seems to work to our benefit: The "anger" code removes the invader from the list of
invaders. The shoot code however triggers the mothership for deletion. If the player shoots an angered invader
it still dies. The find index function returns a negative one, so the remove from ds_list fails to modify data
any further, but it still destroys the correct entity with the instance_destroy function. Just thought that 
was amusing.

-I was thinking that a one hit angry invader seems cheap. Perhaps they should take multiple hits to trigger an
angry state? A color change could represent how close they are to entering anger mode.

-Also, having the invaders round start with it looking like normal breakout again might be cool. You're breaking
bricks again and then the armada shows up blastin.

-That weird crash with the moving invaders happened again, I don't know if it was never truly fixed, or was 
messed up with my changes (most likely), so I changed it to an end step event and that seems to have fixed it.

-Found a speed and angle dependent bug where the ball can clip inside a paddle. causing it to jitter before it
is pushed out. I have only run into this bug once (breakout room, ball bounced into the back of the enemy 
paddle and got caught). It should always sort itself out after a little jittering since I gave the ball a
bias towards its assumed new direction (ex: it hits enemy paddle so it moves one pixel down).

_____________________________________________________________________________________________________________
Day 3:

-There is a somewhat worrying issue with ball/paddle collision. Often if the player moves into the ball along
the side, the ball will get stuck and slowly work its way out. This was mentioned before. However with 
the thicker sprite of the turret player, it is becoming more pronounced. I can think of two solutions 
immediately. 1.) Decrease the thickness of the sprite, letting there be less time for such a condition to 
occur. 2.) Hardcode the intended vspd to the correct direction. This works but with the sprite thickness
it can still lead to some weird looking behavior. Having the ball bounce off a back corner would look
awkward. This is a change I don't want to make yet as it involves a potential modification to game sprites.

-Minor seizure warning for the penetrator powerup. I needed something where I could gauge how long the 
powerup was lasting and I think it's useful for now.

-Shield Sprite is a placeholder, just to show that it works. Currently only bullets are programmed to hit it.
Anything that hits the shield should calculate that collision first (ex: bullets, angry enemies, even low 
invaders) before checking with a collision with the player.

-Ball collision desperately needs rewriting to ignore angry invaders like it was before. Weird stuff starts 
to happen. I tried doing it but it's 6am and my brain juice is dead. 

-I have a basic centipede going. It obviously doesn't split yet, but honestly it shouldn't be that hard.
Here is a rough explanation of how the original arcade game did it:
	
	-Player shoots a section.
	
	-If they shoot the head, the next segment in line becomes the new head. (you get more points for this)
	
	-if they shoot the tail, no new centipede. Just a ded piece and some points.
	
	-Wherever the player shoots on the centipede, that piece becomes a solid block.
	
	-Depending on the direction of travel of the piece hit, one of either side of the bisected centipede
	becomes a new head. Moving left means the one to the right should be the new head.
	
	-As the new head is now moving into the newly created solid wall (can be invisible to player since it
	serves no real gameplay purpose here), the new head immediately starts heading down a head's length.
	
	-After moving down a head's length, it should move in the opposite direction it was when it got
	separated. This should be the default already, but mentioning it just in case.
	
	-At this point, hopefully, they should operate as two separate, albeit shorter, centipedes.
	
-As a warning, the code I wrote for the centipede is kinda scatterbrained. I would suggest making both
the head and body be one object, and have a toggle that you can enable to switch sprite or 
behavior (if you deem that last part necessary). Sorry it's not more, I did the best I could before I 
got too tired.

-One last thing: a typical game of centipede starts with a centipede 10-12 units long. We will need to
scal the sprites accordingly to have it fit nicely.